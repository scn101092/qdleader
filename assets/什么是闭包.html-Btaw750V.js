import{_ as n,o as s,c as a,a as e}from"./app-fr3Buw_y.js";const t={},p=e(`<h2 id="如何理解闭包" tabindex="-1"><a class="header-anchor" href="#如何理解闭包" aria-hidden="true">#</a> 如何理解闭包？</h2><p>· 1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。 2、表现形式：使函数外部能够调用函数内部定义的变量。</p><p>3、实例如下： (1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> count<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>   <span class="token comment">//全局作用域 标记为flag1</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//函数全局作用域 标记为flag2</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        count<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">//函数的内部作用域</span>
        <span class="token function">alert</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出1</span>
<span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出2</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、变量的作用域" tabindex="-1"><a class="header-anchor" href="#_4、变量的作用域" aria-hidden="true">#</a> 4、变量的作用域</h3><p>要理解闭包，首先必须理解Javascript特殊的变量作用域。 变量的作用域分类：全局变量和局部变量。</p><p>特点： 1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。 2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！</p><h2 id="_5、使用闭包的注意点" tabindex="-1"><a class="header-anchor" href="#_5、使用闭包的注意点" aria-hidden="true">#</a> 5、使用闭包的注意点</h2><p>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。 2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p>`,9),c=[p];function o(i,l){return s(),a("div",null,c)}const r=n(t,[["render",o],["__file","什么是闭包.html.vue"]]);export{r as default};
