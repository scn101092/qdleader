import{_ as n,o as s,c as a,a as t}from"./app-fr3Buw_y.js";const e={},p=t(`<p>有没有想过javascript中数组的排序方法Array.prototype.sort()内部是使用什么排序算法实现的呢？</p><p>sort() 关于sort方法的使用就不多说了，很简单：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>sort方法可以直接调用，不传入任何参数，也可以传入一个比较函数作为参数

<span class="token function">当不传入参数时，sort方法会调用默认的排序函数，即先调用每个数组元素的toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>转型方法，然后按照字符串的Unicode编码顺序来对字符串进行排序。

关于比较函数，函数接受两个参数，若函数返回值大于<span class="token number">0</span>，则执行交换，否则不交换
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token keyword">function</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token parameter">val1<span class="token punctuation">,</span> val2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> val1 <span class="token operator">-</span> val2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span>
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">-</span> b
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sort内部的排序算法" tabindex="-1"><a class="header-anchor" href="#sort内部的排序算法" aria-hidden="true">#</a> sort内部的排序算法</h2><p>看源码可知，sort内部是快排的实现，但是在数据长度较小时会使用插排，即如果数组长度小于等于22（v8代码逻辑中是10）的时候使用插入排序，大于这个值使用快速排序， 但是在快速排序递归调用过程中，分治的数组长度小于等于22也会使用插入排序。</p><p>function InnerArraySort(array, length, comparefn) { // In-place QuickSort algorithm. // For short (length &lt;= 22) arrays, insertion sort is used for efficiency. chromium v8引擎array.js</p>`,8),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","sort排序原理.html.vue"]]);export{r as default};
