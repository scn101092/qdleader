import{_ as e,o,c as l,a as t}from"./app-fr3Buw_y.js";const i={},d=t('<h1 id="v012-说一哈什么是mvvm" tabindex="-1"><a class="header-anchor" href="#v012-说一哈什么是mvvm" aria-hidden="true">#</a> V012-说一哈什么是MVVM</h1><blockquote><p>MVVM是Model-View-ViewModel缩写，也就是把MVC中的Controller演变成ViewModel。Model层代表数据模型， View代表UI组件，ViewModel是View和Model层的桥梁，数据会绑定到viewModel层并自动将数据渲染到页面中， 视图变化的时候会通知viewModel层更新数据。</p></blockquote><h1 id="mvvm的优点" tabindex="-1"><a class="header-anchor" href="#mvvm的优点" aria-hidden="true">#</a> mvvm的优点：</h1><blockquote><p>低耦合，视图（View）可以独立于Model变化和修改，一个ViewModel可以绑定到不同的”View”上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。</p></blockquote><blockquote><p>可重用性，可以把一些视图逻辑放在一个ViewModel里面，让很多view重用这段视图逻辑。</p></blockquote><blockquote><p>独立开发，开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计，使用Expression Blend可以很容易设计界面并生成xml代码。</p></blockquote><blockquote><p>可测试，界面向来是比较难于测试的，而现在测试可以针对ViewModel来写。</p></blockquote>',7),c=[d];function a(V,r){return o(),l("div",null,c)}const _=e(i,[["render",a],["__file","V012-说一哈什么是MVVM.html.vue"]]);export{_ as default};
